# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Release Client

on:
  workflow_dispatch:
    branches: [ "main" ]
    paths:
      - client/**

jobs:
  build-and-push:

    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 'client' # The path to the folder where package-lock.json is located.

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    -
      name: Checkout
      uses: actions/checkout@v4
    -
      name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
    -
      run: npm ci
    -
      run: npm run build --if-present
    -
      run: npm run test:unit
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    -
      name: Login to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.USER_TOKEN }}
    -
      name: Setting variables
      id: setting_vars
      run: |
        echo "DATETIME=$(date +'%Y-%m-%d-%H-%M-%S-utc')" >> $GITHUB_OUTPUT
        echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        echo "AUTHOR_NAME=$(git log -1 --pretty=format:'%an')" >> $GITHUB_OUTPUT
    -
      name: Image tag
      id: image_tag
      run: |
        IMAGE_TAG=$(echo -n "${{ steps.setting_vars.outputs.BRANCH_NAME }}-${{ steps.setting_vars.outputs.COMMIT_HASH }}-${{ steps.setting_vars.outputs.DATETIME }}")
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
    -
      name: Build Docker Image
      env:
        IMAGE_NAME: ghcr.io/greatmonster11/cuddly-potato/todo-client
        TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
      run: |
        docker buildx build -t ${IMAGE_NAME}:${TAG} .
    -
      name: Check exist of the created image
      run: |
        docker images
    -
      name: Push Docker image to registry
      env:
        IMAGE_NAME: ghcr.io/greatmonster11/cuddly-potato/todo-client
        TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
      run: |
        docker push ${IMAGE_NAME}:${TAG}

